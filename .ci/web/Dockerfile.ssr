# Author: 潘维吉
# Version 1.0.0
# Description: 自定义构建SSR服务器端渲染

# 构建镜像docker build --build-arg PROJECT_NAME=app 或 docker-compose.yaml args参数传入
ARG EXPOSE_PORT

# 依赖基础镜像  默认值变量方式 ${NODE_VERSON:22}
# 推荐标签: bullseye-slim 稳定的底层依赖，兼容性优于 Alpine 适用需平衡兼容性与体积的 SSR 应用
FROM node:lts AS runtime

# Docker 将此路径用作所有后续命令的默认位置
WORKDIR /app

# 指定切换用户
USER root

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 设置容器内存上限 用于垃圾回收机制（必须！否则Node无法感知容器限制） # 单位MB
#ENV NODE_MEMORY_LIMIT=4096
# Node参数化定制  低延迟应用（实时服务）
#ENV NODE_OPTIONS="--max-old-space-size=4096 --expose-gc --incremental-marking"

# 将根目录下的源码文件都copy到docker容器文件系统的app文件夹下
COPY . .
#COPY myapp.tar.gz /app/
#RUN tar -xzf myapp.tar.gz && rm myapp.tar.gz

# 安装项目依赖包  RUN和CMD都是执行命令，他们的差异在于RUN中定义的命令会在执行docker build命令创建镜像时执行，而CMD中定义的命令会在执行docker run命令运行镜像时执行
# RUN pnpm install && npm run build

# 配置环境变量
ENV HOST 0.0.0.0
ENV PORT $EXPOSE_PORT

# 容器对外暴露的端口号
EXPOSE $EXPOSE_PORT

# 启动运行 需要node_modules目录文件才能运行
CMD node ./dist/server/entry.mjs
#CMD ["npm", "start"]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {APP_NAME}-deployment
  namespace: default
  labels:
    app: {APP_COMMON_NAME}           # Service的selector可以通过metadata labels来筛选，多个不同pod通过一个Service访问打相同的labels

spec:
  replicas: {K8S_POD_REPLICAS}
  #minReplicas: 1                    #最小副本数
  #maxReplicas: 10                   #最大副本数
  selector:
    matchLabels:
      app: {APP_NAME}

  template:
    metadata:
      labels:
        app: {APP_NAME}
      annotations:
        prometheus.io/scrape: "true"                # 让prometheus自动发现
        prometheus.io/path: "/actuator/prometheus"  # /metric路径是集成内提供的 Prometheus 监控接口 或利用 exporter 服务来为 Prometheus 提供指标数据
        prometheus.io/port: "{CONTAINER_PORT}"      # /metric接口的端口

    spec:
      containers:
      - name: {APP_COMMON_NAME}
        image: {IMAGE_URL}:{IMAGE_TAG}
        imagePullPolicy: Always       # 强制拉取线上镜像
#        resources:
#          requests:
#            cpu: 300m
#            memory: 512Mi
#          limits:
#            cpu: 600m
#            memory: 2048Mi
        ports:
        - containerPort: {CONTAINER_PORT}
        env:
          - name: TZ
            value: Asia/Shanghai
          - name: SPRING_PROFILES_ACTIVE
            value: {SPRING_PROFILE}
          - name: EXTEND_PORT
            value: "{CONTAINER_PORT}"

#        volumeMounts:
#          - name: nfs-storage
#            mountPath: {NFS_HOST_PATH}
            # The variable expansion uses round brackets (not curly brackets).
            # subPathExpr: $(POD_NAME)
#      volumes:
#        - name: nfs-storage
#          nfs: # 自建NFS文档: https://docs.ksyun.com/documents/5509?type=3
#            server: {NFS_SERVER}
#            path: {NFS_SERVER_PATH}

      # 对节点（就绪探测）服务可用性进行检测， initialDelaySeconds启动多少秒后开始，periodSeconds每多少秒检测一次，timeoutSeconds超时时间秒
        readinessProbe:
          tcpSocket:
            port: {CONTAINER_PORT}
          initialDelaySeconds: 2   # 探针在容器启动后的多少秒才开始执行
          periodSeconds: 2         # 探针执行频率。默认是10秒，最小1秒
          timeoutSeconds: 1        # 探测超时时间。默认1秒，最小1秒
          failureThreshold: 600    # 探测成功后，最少连续探测失败多少次才被认定为失败。默认是3。最小值是1
        # LivenessProbe（存活探测） 对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器
        livenessProbe:
          tcpSocket:
            port: {CONTAINER_PORT}
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10

      restartPolicy: Always   # 停机后总是不断重启
#     affinity: # 使用工作负载反亲和特性，让Pod之间尽量“互斥”，能尽量均匀的分布在各node节点上  参考文档： https://support.huaweicloud.com/cce_faq/cce_faq_00260.html
      affinity: # 处理反亲和导致第一次部署后重复部署的冲突问题 滚动部署旧pod存在导致
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app  # node节点标签方式 kubectl get nodes --show-labels 与 kubectl label nodes <your-node-name> nodeLabelName=node1
                    operator: In        # NotIn 和 DoesNotExist 可用来实现节点反亲和性行为。 你也可以使用节点污点 将 Pod 从特定节点上驱逐
                    values:
                      - {APP_NAME}
              namespaces:
              - default
              topologyKey: kubernetes.io/hostname         # pod不会调度到同一节点 在节点上起作用
      # 私有镜像拉取密钥配置   参考文档：https://kubernetes.io/docs/concepts/containers/images/#creating-a-secret-with-a-docker-config
      # kubectl create secret docker-registry panweiji2022 --docker-server=registry.cn-qingdao.aliyuncs.com  --docker-username=2000160180 --docker-password=panweiji@2022--docker-email=406798106@qq.com --namespace=default
      imagePullSecrets:
        - name: {K8S_IMAGE_PULL_SECRETS}
  # 部署更新策略
  strategy:
    type: RollingUpdate  # 滚动更新 “RollingUpdate”是默认值   Recreate类型在创建新 Pod 之前，所有现有的 Pod 会被杀死
    rollingUpdate:  # 滚动更新速率控制
      maxSurge: 25%   # 过期望副本数最大比例或最大值  值越小，越能保证服务稳定，更新越平滑
      maxUnavailable: 25%  # 最大不可用副本数最大比例或最大值  值调的越大，副本更新速度越快

---

apiVersion: v1
kind: Service

metadata:
  name: {APP_COMMON_NAME}-service
  namespace: default
  labels:
    app: {APP_COMMON_NAME}-service
  annotations:
    prometheus.io/scrape: "true"                # 让prometheus自动发现
    prometheus.io/path: "/actuator/prometheus"  # /metric路径是集成内提供的 Prometheus 监控接口 或利用 exporter 服务来为 Prometheus 提供指标数据
    prometheus.io/port: "{CONTAINER_PORT}"      # /metric接口的端口

spec:
  type: LoadBalancer                   # 规格类型ClusterIP、NodePort、LoadBalancer、Ingress实现Pod外网访问和负载均衡
  #sessionAffinity: ClientIP           # 设置为 "ClientIP" （默认值是 "None"），来基于客户端的IP地址选择固定会话Pod关联
  selector:
    app: {APP_COMMON_NAME}             # 通过Pod的labels指定Pod 建立关联  Service的selector可以通过metadata labels来筛选，多个不同pod通过一个Service访问打相同的labels
  ports:
    - name: {APP_COMMON_NAME}
      port: {HOST_PORT}                # 指定Service接收请求的端口
      targetPort: {CONTAINER_PORT}     # 请求转发的端口 容器内部端口
      #nodePort: {HOST_PORT}           # NodePort类型端口区间 30000–32767
      protocol: TCP                    # 定义通信协议

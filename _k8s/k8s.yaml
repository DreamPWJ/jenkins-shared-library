apiVersion: apps/v1
kind: Deployment
metadata:
  name: {APP_NAME}-deployment
  namespace: default
  labels:
    app: {APP_NAME}

spec:
  replicas: {K8S_POD_REPLICAS}
  #minReplicas: 1                    #最小副本数
  #maxReplicas: 10                   #最大副本数
  selector:
    matchLabels:
      app: {APP_NAME}

  template:
    metadata:
      labels:
        app: {APP_NAME}
      annotations:
        prometheus.io/scrape: "true"                # 让prometheus自动发现
        prometheus.io/path: "/actuator/prometheus"  # /metric路径是集成内提供的 Prometheus 监控接口 或利用 exporter 服务来为 Prometheus 提供指标数据
        prometheus.io/port: "{CONTAINER_PORT}"      # /metric接口的端口

    spec:
      containers:
      - name: {APP_NAME}
        image: {IMAGE_URL}:{IMAGE_TAG}
        imagePullPolicy: Always       # 强制拉取线上镜像
#        resources:
#          requests:
#            cpu: "300m"
#            memory: {MEMORY_SIZE}i
#          limits:
#            cpu: "600m"
#            memory: {MEMORY_SIZE}i
        ports:
        - containerPort: {CONTAINER_PORT}
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: {SPRING_PROFILE}
          - name: EXTEND_PORT
            value: "{CONTAINER_PORT}"
#        volumeMounts:
#          - name: nfs-storage
#            mountPath: {NFS_HOST_PATH}
            # The variable expansion uses round brackets (not curly brackets).
            # subPathExpr: $(POD_NAME)
#      volumes:
#        - name: nfs-storage
#          nfs:
#            server: {NFS_SERVER}
#            path: {NFS_SERVER_PATH}

      # 对节点（就绪探测）服务可用性进行检测， initialDelaySeconds启动多少秒后开始，periodSeconds每多少秒检测一次，timeoutSeconds超时时间秒
#      readinessProbe:
#        httpGet:
#          path: /
#          port: {CONTAINER_PORT}
#        initialDelaySeconds: 2
#        periodSeconds: 2
#        timeoutSeconds: 1
#        failureThreshold: 600
#      # LivenessProbe（存活探测） 对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器
#      livenessProbe:
#        httpGet:
#          path: /
#          port: {CONTAINER_PORT}
#        initialDelaySeconds: 60
#        timeoutSeconds: 5
#        failureThreshold: 10

      restartPolicy: Always   # 停机后总是不断重启
#      affinity: # 使用工作负载反亲和特性，让Pod之间尽量“互斥”，能尽量均匀的分布在各node节点上

      # 私有镜像拉取密钥配置   参考文档：https://kubernetes.io/docs/concepts/containers/images/#creating-a-secret-with-a-docker-config
      # kubectl create secret docker-registry panweiji2022 --docker-server=registry.cn-qingdao.aliyuncs.com  --docker-username=2000160180 --docker-password=panweiji@2022--docker-email=406798106@qq.com --namespace=default
      imagePullSecrets:
        - name: {K8S_IMAGE_PULL_SECRETS}

---

apiVersion: v1
kind: Service

metadata:
  name: {APP_NAME}-service
  namespace: default
  labels:
    app: {APP_NAME}-service
  annotations:
    prometheus.io/scrape: "true"                # 让prometheus自动发现
    prometheus.io/path: "/actuator/prometheus"  # /metric路径是集成内提供的 Prometheus 监控接口 或利用 exporter 服务来为 Prometheus 提供指标数据
    prometheus.io/port: "{CONTAINER_PORT}"      # /metric接口的端口

spec:
  type: LoadBalancer                   # 规格类型ClusterIP、NodePort、LoadBalancer、Ingress实现Pod外网访问和负载均衡
  #sessionAffinity: ClientIP           # 设置为 "ClientIP" （默认值是 "None"），来基于客户端的IP地址选择固定会话Pod关联
  selector:
    app: {APP_NAME}                    # 通过Pod的labels指定Pod 建立关联
  ports:
    - name: {APP_NAME}
      port: {HOST_PORT}                # 指定Service接收请求的端口
      targetPort: {CONTAINER_PORT}     # 请求转发的端口 容器内部端口
      #nodePort: {HOST_PORT}           # NodePort类型端口区间 30000–32767
      protocol: TCP                    # 定义通信协议

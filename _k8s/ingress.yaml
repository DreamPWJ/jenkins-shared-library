# Author: 潘维吉
# Description: 执行云原生K8S七层负载

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gray-release-canary
  namespace: default
  # Annotations属性文档:  https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    acme.cert-manager.io/http01-edit-in-place: "true"

    # 开启金丝雀Canary。
    nginx.ingress.kubernetes.io/canary: "true"
    # Http Header请求头为version。
    nginx.ingress.kubernetes.io/canary-by-header: "version"
    # 请求头version=v2.0.0时，请求才会被路由到新版本服务中。
    nginx.ingress.kubernetes.io/canary-by-header-value: "v2.0.0"
    #nginx.ingress.kubernetes.io/canary-by-header-pattern: ""
    #nginx.ingress.kubernetes.io/canary-by-cookie: ""
    # 在满足上述匹配规则的基础上仅允许百分比的流量会被路由到新版本服务中。
    nginx.ingress.kubernetes.io/canary-weight: "100"

    # 开启跨域
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-max-age: "64800"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    # 数据请求超时时间
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    # 负载均衡算法 如ip_hash
    nginx.ingress.kubernetes.io/upstream-hash-by: "$host"
    # Session保持配置
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "persistent"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    # 后端大文件上传大小
    nginx.ingress.kubernetes.io/client-body-buffer-size: 1024m
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: 2048m
    # 数据传输大小
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
    # 配置是否同时支持http和https访问应用
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # 采用了 “漏斗” 算法实现限流 保证服务可用性和被攻击  nginx的限流是一个队列模型。限流连接数为 队列长度+队列处理能力
    # 每个IP每秒可以访问的次数 默认乘数为5
    nginx.ingress.kubernetes.io/limit-rps: "50"
    # 为计算限速漏桶算法的 burst size和 limit-rps 的相乘放大系数  burst为队列长度
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "10"
    # 配合 limit-window 表示每多少秒全局限速多少次（需要依赖 memcached）
    nginx.ingress.kubernetes.io/global-rate-limit: "100000"
    nginx.ingress.kubernetes.io/global-rate-limit-window: 1s
    # 限制发送给后端服务的发送速率为 多少MB/每秒 rate为队列处理能力
    #nginx.ingress.kubernetes.io/limit-rate: 10240
    # 发送给后端服务的前 多少MB 数据不进行限速
    #nginx.ingress.kubernetes.io/limit-rate-after: 102400
    # 白名单 客户端IP源范围要从速率限制中排除。该值是逗号分隔的CIDR列表
    #nginx.ingress.kubernetes.io/limit-whitelist:
    # 限流超出后的响应码
    nginx.ingress.kubernetes.io/configuration-snippet: |
      limit_req_status 429;

spec:
  ingressClassName: k8s-ingress
  tls: # TLS安全
    - hosts:
        - panweiji.com
    - secretName: panweiji-tls-secret # Secret证书存储名称 存放HTTPS证书

  rules:
    - host: panweiji.com
      http:
        paths:
          - path: /
            backend:
              #服务名称
              service:
                name: {APP_NAME}-service
              #服务端口
                port:
                  number: {HOST_PORT}
            pathType: Prefix


# 获取Ingress
# kubectl get ing
# 删除Ingress
# kubectl delete ingress ingress-name
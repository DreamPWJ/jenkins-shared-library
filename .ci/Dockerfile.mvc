# Author: 潘维吉
# Version 1.0.0
# Description: 自定义构建Spring MVC项目镜像

# 构建镜像docker build --build-arg PROJECT_NAME=app 或 docker-compose.yaml args参数传入
ARG TOMCAT_VERSION
ARG JDK_VERSION
ARG EXPOSE_PORT
ARG JAVA_OPTS

# Dockerfile多阶段构建 参考文档: https://docs.docker.com/develop/develop-images/multistage-build/
# 示例 FROM golang:1.16 下行注释的KEY值动态替换
#FROM-MULTISTAGE-BUILD-IMAGES

# 基础镜像  默认值变量方式 ${JDK_VERSION:-11}
FROM tomcat:${TOMCAT_VERSION}-jre8

# 多阶段构建镜像 从上一个镜像内复制环境到本镜像
# 示例 COPY --from=0 / /   下行注释的KEY值动态替换
#COPY-MULTISTAGE-BUILD-IMAGES

# 设置镜像元数据，利用 docker inspect [镜像名称|镜像ID],即可查看
#LABEL author="潘维吉"

# 挂载数据卷 docker删除后数据不丢失 docker run -v 映射
VOLUME /logs

# 指定切换用户
USER root

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 修改tomcat配置  或者 docker run -v /my/tomcat/server.xml:/usr/local/tomcat/conf/server.xml
# COPY server.xml /usr/local/tomcat/conf/

# 将旧部署文件删除和可能导致高危漏洞的文件 通过修改catalina.sh脚本来追加或覆盖默认的JAVA_OPTS环境变量
RUN rm -Rf /usr/local/tomcat/webapps/ROOT* && rm -rf /usr/local/tomcat/examples/* && rm -rf /usr/local/tomcat/docs/* \
 && echo '#!/bin/bash' > /usr/local/tomcat/bin/setenv.sh  && chmod +x /usr/local/tomcat/bin/setenv.sh \
 && echo "export JAVA_OPTS=\"$JAVA_OPTS\"" >> /usr/local/tomcat/bin/setenv.sh

# 将部署文件复制到docker内  ROOT是默认根目录  如实现同一个Tomcat下部署多个应用 可自定义其名称 访问路径多加目录名称访问
COPY  *.war  /usr/local/tomcat/webapps/ROOT.war

# 对外暴露端口
EXPOSE  $EXPOSE_PORT

# 健康检查 如果服务不可用或未响应，Docker可以标记容器为不健康，并根据配置采取行动，如自动重启容器
HEALTHCHECK --start-period=10s --interval=30s --timeout=30s --retries=3 \
    CMD curl --fail http://localhost:$DOCKER_SERVICE_PORT || exit 1

# 启动Tomcat服务 运行启动命令
CMD ["catalina.sh", "run"]
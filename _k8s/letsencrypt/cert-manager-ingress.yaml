# Author: 潘维吉
# Description: 云原生K8S中使用cert-manager基于 ACME 协议与 Let's Encrypt 自动签发与续签免费的SSL证书

# 创建一个集群级的签发机构  仅需一次  证书生成需要等待1分钟左右  域名解析ip正确 ingressClassName指定正确  Let's Encrypt限制每个 IP 地址每 3 小时最多可以请求 5 个证书 超出请分批执行创建证书
# 重新生成证书 kubectl delete clusterissuer  issuerName  和 kubectl --namespace cert-manager  delete  Secret  letsencrypt-prod-key
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory  # ACME 协议的服务端  acme-staging-v02测试证书没有限制
    email: 406798106@qq.com  # 证书快过期的时候会有邮件提醒
    privateKeySecretRef:
      name: letsencrypt-prod-key  # 私钥秘密必须与cert-manager服务在同一个命名空间中才能工作 kubectl delete Secret letsencrypt-prod-key --namespace cert-manager
    solvers:
      - http01: # 签发机构使用 HTTP-01 的方式进行 acme 协议 (还可用 DNS 方式，acme 协议的目的是证明机器和域名都是属于你的，然后才准许颁发证书)
          ingress:
            #serviceType: ClusterIP
            name: pengbocloud-k8s-ingress  # 这个匹配是关键！！！  1. class是指定自动创建的 Ingress 的 ingress class  2. name是指定被自动修改的 Ingress 名称

#---
#
## 创建一个证书
#apiVersion: cert-manager.io/v1
#kind: Certificate
#metadata:
#  name: cert-manager-tls
#  namespace: cert-manager
#spec:
#  secretName: saas.pengbocloud.com-tls  # 最终签发出来的证书会保存在这个 Secret 里面
#  duration: 2160h  # 证书有效期时长
#  renewBefore: 360h # 距离证书过期还有多久重新自动续签
#  issuerRef:
#    kind: ClusterIssuer
#    name: letsencrypt-prod # 引用 Issuer
#  dnsNames:
#    - saas.pengbocloud.com # 要签发证书的域名

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pengbocloud-k8s-ingress
  namespace: default
  annotations:
    # add an annotation indicating the issuer to use
    cert-manager.io/cluster-issuer: letsencrypt-prod
    acme.cert-manager.io/http01-edit-in-place: "true"

    # 负载均衡算法 如ip_hash
    # nginx.ingress.kubernetes.io/upstream-hash-by: "$host"
    # Session保持配置
    # nginx.ingress.kubernetes.io/affinity: "cookie"
    # nginx.ingress.kubernetes.io/affinity-mode: "persistent"
    # nginx.ingress.kubernetes.io/session-cookie-name: "route"

    # 后端大文件上传大小 数据传输大小
    nginx.ingress.kubernetes.io/client-body-buffer-size: 1024m
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: 2048m
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m

    # 开启CORS跨域请求
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-max-age: "64800"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

    # 配置是否同时支持http和https访问应用
    nginx.ingress.kubernetes.io/ssl-redirect: "false"

    # 采用了 “漏斗” 算法实现限流 保证服务可用性和被攻击  nginx的限流是一个队列模型。限流连接数为 队列长度+队列处理能力
    # 每个IP每秒可以访问的次数 默认乘数为5
    nginx.ingress.kubernetes.io/limit-rps: "50"
    # 为计算限速漏桶算法的 burst size和 limit-rps 的相乘放大系数  burst为队列长度
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "10"
    # 配合 limit-window 表示每多少秒全局限速多少次（需要依赖 memcached）
    #nginx.ingress.kubernetes.io/global-rate-limit: "100000"
    #nginx.ingress.kubernetes.io/global-rate-limit-window: 1s
    # 限制发送给后端服务的发送速率为 多少MB/每秒 rate为队列处理能力
    #nginx.ingress.kubernetes.io/limit-rate: 10240
    # 发送给后端服务的前 多少MB 数据不进行限速
    #nginx.ingress.kubernetes.io/limit-rate-after: 102400
    # 白名单 客户端IP源范围要从速率限制中排除。该值是逗号分隔的CIDR列表
    #nginx.ingress.kubernetes.io/limit-whitelist: 120.10.150.36/16
    # 限流超出后的响应码
    nginx.ingress.kubernetes.io/configuration-snippet: |
      limit_req_status 429;

spec:
  ingressClassName: lanneng-k8s-ingress
  tls:
    - hosts:
        - saas.pengbocloud.com
      secretName: saas.pengbocloud.com-tls
    - hosts:
        - saasadmin.pengbocloud.com
      secretName: saasadmin.pengbocloud.com-tls
    - hosts:
        - charge-app-api.pengbocloud.com
      secretName: charge-app-api.pengbocloud.com-tls
  rules:
    #自定义域名
    - host: saas.pengbocloud.com
      http:
        paths:
          - path: /
            backend:
              #服务名称 确保正确 否则无法匹配具体服务
              service:
                name: openpark-saas-admin-web-service
                #服务端口
                port:
                  number: 8025
            pathType: Prefix
    - host: saasadmin.pengbocloud.com
      http:
        paths:
          - path: /
            backend:
              #服务名称
              service:
                name: openpark-saas-app-service
                #服务端口
                port:
                  number: 8085
            pathType: Prefix
    - host: charge-app-api.pengbocloud.com
      http:
        paths:
          - path: /
            backend:
              #服务名称
              service:
                name: pellet-charging-app-service
                #服务端口
                port:
                  number: 8080
            pathType: Prefix
# Author: 潘维吉
# Version 1.0.0
# Description: 自定义构建Spring Native与GraalVM新引擎项目镜像

# 构建镜像docker build --build-arg PROJECT_NAME=app 或 docker-compose.yaml args参数传入
ARG PROJECT_NAME
ARG EXPOSE_PORT

# Dockerfile多阶段构建 参考文档: https://docs.docker.com/develop/develop-images/multistage-build/
# 示例 FROM golang:1.16 下行注释的KEY值动态替换
#FROM-MULTISTAGE-BUILD-IMAGES

# 基础镜像
FROM alpine:latest

# 多阶段构建镜像 从上一个镜像内复制环境到本镜像
# 示例 COPY --from=0 / /   下行注释的KEY值动态替换
#COPY-MULTISTAGE-BUILD-IMAGES

# 设置镜像元数据，利用 docker inspect [镜像名称|镜像ID],即可查看
#LABEL author="潘维吉"

# 挂载数据卷 docker删除后数据不丢失 docker run -v 映射
VOLUME /logs

# 指定切换用户
USER root

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 将部署文件复制到docker内根目录 Spring Native原生镜像包 通常扩展名为.exe在Windows下，而在Linux上没有特定扩展名，直接是一个可执行文件
COPY spring-native-graalvm /app/

# 给应用程序赋予执行权限
RUN chmod +x /app/spring-native-graalvm

# 定义环境变量（如果需要的话）
#ENV APP_ENV=production

# 对外暴露端口
EXPOSE  $EXPOSE_PORT

# Spring Native自定义启动命令 Linux操作系统上原生机器码级别的二进制可执行文件，无需JVM环境
ENTRYPOINT ["/app/spring-native-graalvm"]
# 如果需要以守护进程方式运行
# CMD ["./my-native-app", "--server.port=$APP_PORT"]